# -*- coding: utf-8 -*-
"""StartStep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10N6Y3uHajsaIQZX-0NvOPH112ENPCDn9
"""

import pandas as pd

pd.set_option("display.max_columns", None)

df=pd.read_csv("mark_data_dirty.csv")

df

"""# EDA """

df.info()

df.describe()

for col in df.columns:
    col_name_length = len(col)
    print(col_name_length)

inc_col = [col for col in df.columns if 'Income' in col]
print(len(inc_col[0]))

df.rename(columns={" Income " : "Income"} , inplace=True)

inc_col = [col for col in df.columns if 'Income' in col]
print(len(inc_col[0]))

df.isna().sum()

df.Income =df.Income.str.replace("$","").str.replace(",","").astype("float")

df.head()

df.info()

df.Income.sort_values(na_position="first").head(25)

df.iloc[[134,262,394,449,525,590,899,997,1096,1185,1213,1312,1515,1558,1693,1804,1858,1863,1880,1967,1983,2139,2165,2170]]

df.describe()

df.Income=df.Income.fillna(52247)

df.Income.isna().sum()

df.describe()

df[df.Income>200000]

df.Income=df.Income.fillna(52247)

df['Income'].iloc[527] = 52247

df.iloc[527]

df["Dt_Customer"]=pd.to_datetime(df["Dt_Customer"])

df.info()

"""# Feature Engineering"""

# Dt_Customer -change dtype to datetime
df["Year_Customer"]= pd.DatetimeIndex(df["Dt_Customer"]).year

df["Year_Customer"]

# Merge columns -Kidhome and - Teenhome
df["Dependents"]= df["Kidhome"]+df["Teenhome"]

df.head()

# Creating Total_Mnt column
Mnt_col = [col for col in df.columns if 'Mnt' in col]
df["Total_Mnt"]= df[Mnt_col].sum(axis=1)

df["Total_Mnt"]

df.head()

"""# Database design"""

list(df.columns)

df_clean=df[['ID','Country',
 'Year_Birth',
 'Education',
 'Marital_Status',
 'Income','Dependents',

 'Dt_Customer','Year_Customer','Total_Mnt',

 'MntWines',
 'MntFruits',
 'MntMeatProducts',
 'MntFishProducts',
 'MntSweetProducts',
 'MntGoldProds',
 'NumDealsPurchases',
 'NumWebPurchases',
 'NumCatalogPurchases',
 'NumStorePurchases',
 'NumWebVisitsMonth',]]

df_clean.head()

"""# Analysis"""

# Count for each Educational class
df_clean["Education"].value_counts()

# % of non academics
(203+54)/2240*100

# % of academics
100-11.47

# Count for Marital_Status
df_clean["Marital_Status"].value_counts()

def replace_values(x):
    if x in [df['Marital_Status'] == 'Alone'
     or df['Marital_Status'] == 'YOLO'
     or df['Marital_Status'] == 'Absurd']:
        return df['Marital_Status'] =='Single'
    else:
        return x

df_clean["Marital_Status"].value_counts()

df['Marital_Status'] = df['Marital_Status'].apply(replace_values)

df_clean["Marital_Status"].value_counts()

#def clean_marital_status(df):
    #df.loc[df['Marital_Status'] == 'Alone', 'Marital_Status'] = 'Single'
    #df.loc[df['Marital_Status'] == 'YOLO', 'Marital_Status'] = 'Single'
    #df.loc[df['Marital_Status'] == 'Absurd', 'Marital_Status'] = 'Single'
    #return df

df_clean.loc[df_clean['Marital_Status'] == 'Alone', 'Marital_Status'] = 'Single'

df_clean.loc[df_clean['Marital_Status'] == 'YOLO', 'Marital_Status'] = 'Single'

df_clean.loc[df_clean['Marital_Status'] == 'Absurd', 'Marital_Status'] = 'Single'

df_clean["Marital_Status"].value_counts()

# Count for Countries
df_clean["Country"].value_counts()

"""# Data Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
pd.set_option("display.max_columns", None)
# %matplotlib inline
sns.set_context("notebook")
sns.set_style("whitegrid")
sns.set_palette("Blues_r")

plt.figure(figsize=(8,4))
sns.distplot(df_clean["Income"], kde=False, hist=True)
plt.title("Income distribution", size=16)
plt.ylabel("count")

plt.figure(figsize=(8,4))
sns.distplot(df["Income"], kde=False, hist=True)
plt.title("Income distribution", size=16)
plt.ylabel("count")

plt.figure(figsize=(8,4))
sns.distplot(df_clean["Year_Birth"], kde=False, hist=True)
plt.title("Age Distribution", size=16)
plt.ylabel("count")

df_clean['Year_Birth'].plot(kind='box', figsize=(6,8), patch_artist=True)

df_clean[df_clean['Year_Birth'] < 1939]

df_clean.describe()



plt.figure(figsize=(5, 5))
sns.boxplot(x='Dependents', y='Total_Mnt', data=df_clean);df_clean.loc[df_clean['Year_Birth'] < 1939, 'Year_Birth'] = 1969

df_clean['Income'].plot(kind='box', figsize=(6,8), patch_artist=True)

df_clean[df_clean['Income'] > 140000]

df_clean['Dependents'].plot(kind='box', figsize=(6,8), patch_artist=True)

plt.figure(figsize=(5, 5))
sns.boxplot(x='Dependents', y='Total_Mnt', data=df_clean);

plt.figure(figsize=(5, 5))
sns.boxplot(x='Dependents', y='MntFruits', data=df_clean);

plt.figure(figsize=(5, 5))
sns.boxplot(x='Dependents', y='MntSweetProducts', data=df_clean);

df_clean["Marital_Status"].value_counts()

plt.figure(figsize=(5, 5))
sns.boxplot(x='Marital_Status', y='Total_Mnt', data=df_clean);

sns.lmplot(x='Income', y='Total_Mnt', data=df_clean);

df.info()

sns.lmplot(x='Year_Birth', y='NumStorePurchases', data=df_clean[df_clean['Income'] < 120000]);

sns.lmplot(y='NumStorePurchases', x='Year_Birth', data=df_clean[df_clean['Year_Birth'] > 1940]);

sns.lmplot(y='NumWebPurchases', x='Year_Birth', data=df_clean[df_clean['Year_Birth'] > 1940]);

df_clean['Age'] = df_clean['Year_Customer'] - df_clean['Year_Birth']                                    # Generate new Value Age
g = sns.lmplot(x='Age', y='Income', data=df_clean[df_clean['Age'] < 80] [df_clean["Income"] < 200000]); # Sets new Variable g
g.set(xlim = (10,80))

df_clean.to_csv("marketing_data_clean.csv")

